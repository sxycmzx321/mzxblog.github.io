<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MMM</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-25T12:20:57.911Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>MZX</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UML类图</title>
    <link href="http://example.com/2023/07/25/UML%E7%B1%BB%E5%9B%BE/"/>
    <id>http://example.com/2023/07/25/UML%E7%B1%BB%E5%9B%BE/</id>
    <published>2023-07-25T12:16:32.000Z</published>
    <updated>2023-07-25T12:20:57.911Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">playBasketball</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">pass</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么此类对应的UML为：</p><hr><p>看到该图分为三层：</p><p>最顶层的为类名，中间层的为属性，最底层的为方法。</p><p>属性的表示方式为：【可见性】【属性名称】：【类型】&#x3D;{缺省值，可选}</p><p>方法的表示方式为：【可见性】【方法名称】（【参数列表】）：【类型】</p><p>可见性都是一样的，”-“表示private、”+”表示public、”#”表示protected。</p><hr><h1 id="1、继承关系"><a href="#1、继承关系" class="headerlink" title="1、继承关系"></a>1、继承关系</h1><p>继承也叫作泛化（Generalization），用于描述父子类之间的关系，父类又称为基类或者超类，子类又称作派生类。在UML中，泛化关系用带<strong>空心三角形</strong>的<strong>实线</strong>来表示。</p><h2 id="1-1普通继承关系"><a href="#1-1普通继承关系" class="headerlink" title="1.1普通继承关系"></a>1.1普通继承关系</h2><pre><code>假如现在我又定义了一个Student和一个Teacher：</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> Persion</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">study</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string studentNo;</span><br><span class="line">&#125;;</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> Persion</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">teach</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string teacherNo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么，用UML表示这种关系应当是：</p><p><img src="/image_1.9e3849ce.png"></p><hr><h2 id="1-2-抽象继承关系"><a href="#1-2-抽象继承关系" class="headerlink" title="1.2 抽象继承关系"></a>1.2 抽象继承关系</h2><p>上面的继承是普通的继承，在C++中，除了普通的继承之外，众所周知的还有一种抽象的继承关系，因此就再讲讲抽象继承关系，作为上面的继承的补充。</p><p>比方说我想实现一个链表（Link），插入（insert）与删除（remove）动作我想让子类去实现，链表本身只实现统计链表中元素个数的动作（count），然后有一个子类单向链表（OneWayLink）去实现父类没有实现的动作，C++代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类(含有纯虚函数的类)</span></span><br><span class="line"><span class="comment">// 在C++中，一个抽象类是指包含至少一个纯虚函数（Pure Virtual Function）的类。纯虚函数是通过在函数声明的末尾使用 &quot;= 0&quot; 来定义的，它表示该函数没有实际的实现，而是由派生类来实现。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Link</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">insert</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">remove</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OneWayLink</span> : <span class="keyword">public</span> Link</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其UML的画法为：</p><p><img src="/image_2.8008b895.png"></p><p>在UML中，抽象类无论类名还是抽象方法名，都以<strong>斜体</strong>的方式表示，因为这也是一种继承关系，所以子类与父类通过带空心三角形的实线来联系。</p><hr><h1 id="2、关联关系"><a href="#2、关联关系" class="headerlink" title="2、关联关系"></a>2、关联关系</h1><p>关联（Assocition）关系是类与类之间最常见的一种关系，它是一种结构化的关系，表示一类对象与另一类对象之间有联系，如汽车和轮胎、师傅和徒弟、班级和学生等。在UML类图中，用实线连接有关联关系的对象所对应的类，<strong>在C++中通常将一个类的对象作为另一个类的成员变量</strong>。关联关系分单向关联、双向关联、自关联，逐一看一下。</p><h2 id="2-1单向关联关系"><a href="#2-1单向关联关系" class="headerlink" title="2.1单向关联关系"></a>2.1单向关联关系</h2><p>单向关联指的是关联只有一个方向，比如顾客（Customer）拥有地址（Address），其代码实现为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地址类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顾客类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Address address; <span class="comment">// 作为成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UML的画法为：</p><p><img src="/image_3.8cfd4e6a.png"></p><h2 id="2-2双向关联关系"><a href="#2-2双向关联关系" class="headerlink" title="2.2双向关联关系"></a>2.2双向关联关系</h2><p>默认情况下的关联都是双向的，比如顾客（Customer）购买商品（Product），反之，卖出去的商品总是与某个顾客与之相关联，这就是双向关联。c++ 类的写法为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 商品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Customer customer; <span class="comment">// 该商品属于哪一位顾客, 作为成员变量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顾客类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Product product[<span class="number">64</span>]; <span class="comment">// 给顾客购买了哪些商品, 作为成员变量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图应当是:</p><p><img src="/image_4.fc432878.png"></p><h2 id="2-3自关联关系"><a href="#2-3自关联关系" class="headerlink" title="2.3自关联关系"></a>2.3自关联关系</h2><p>自关联，指的就是对象中的属性为对象本身，<strong>这在链表中非常常见</strong>，单向链表Node中会维护一个它的前驱Node，双向链表Node中会维护一个它的前驱Node和一个它的后继Node。就以单向链表为例，它的C++写法为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链表节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node* nextNode; <span class="comment">// 指向后继节点的指针, 作为成员变量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图应当是：</p><p><img src="/image_5.9bccc627.png"></p><hr><h1 id="3、聚合关系"><a href="#3、聚合关系" class="headerlink" title="3、聚合关系"></a>3、聚合关系</h1><p>&#x3D;&#x3D;聚合（Aggregation）关系表示&#x3D;&#x3D;<strong>整体</strong>&#x3D;&#x3D;与&#x3D;&#x3D;<strong>部分</strong>&#x3D;&#x3D;的关系&#x3D;&#x3D;。在聚合关系中，成员对象是整体的一部分，但是成员对象可以<strong>脱离整体对象独立存在</strong>。</p><p>在UML中，&#x3D;&#x3D;聚合关系用带&#x3D;&#x3D;<strong>空心菱形</strong>&#x3D;&#x3D;的直线表示&#x3D;&#x3D;，如汽车（Car）与引擎（Engine）、轮胎（Wheel）、车灯（Light），C++ 表示为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Wheel</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Light</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(Engine engine, Light light, Wheel wheel)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;engine = engine;</span><br><span class="line"><span class="keyword">this</span>-&gt;light = light;</span><br><span class="line"><span class="keyword">this</span>-&gt;wheel = wheel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drive</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Engine engine;</span><br><span class="line">Light light;</span><br><span class="line">Wheel wheel;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图为：</p><p><img src="/image_6.c80d3ca0.png"></p><p>代码实现聚合关系，成员对象通常以构造方法、Setter方法的方式注入到整体对象之中。</p><hr><h1 id="4、组合关系"><a href="#4、组合关系" class="headerlink" title="4、组合关系"></a>4、组合关系</h1><p><strong>组合（Composition）关系也表示的是一种整体和部分的关系</strong>，但是在组合关系中整体对象可以控制成员对象的生命周期，一旦整体对象不存在，成员对象也不存在，<strong>整体对象和成员对象之间具有同生共死的关系</strong>。</p><p>在UML中组合关系用<strong>带实心菱形的直线表示</strong>。</p><p>比如人的头（Head）和嘴巴（Mouth）、鼻子（Nose），嘴巴和鼻子是头的组成部分之一，一旦头没了，嘴巴也没了，因此头和嘴巴、鼻子是组合关系，C++ 表示为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mouth</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Nose</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Head</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Head</span>()</span><br><span class="line">&#123;</span><br><span class="line">mouth = <span class="keyword">new</span> <span class="built_in">Mouth</span>();</span><br><span class="line">nose = <span class="keyword">new</span> <span class="built_in">Nose</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shake</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Mouth *mouth;</span><br><span class="line">Nose *nose;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其UML的表示方法为：</p><p><img src="/image_7.5be9e24c.png"></p><p>代码实现组合关系，通常在整体类的构造方法中直接实例化成员类，因为组合关系的整体和部分是共生关系，如果通过外部注入，那么即使整体不存在，那么部分还是存在的，这就相当于变成了一种聚合关系了。</p><hr><h1 id="5、依赖关系"><a href="#5、依赖关系" class="headerlink" title="5、依赖关系"></a>5、依赖关系</h1><p>依赖（Dependency）关系是一种使用关系，特定事物的改变有可能会影响到使用该事物的其他事物，在需要表示一个事物使用另一个事物时使用依赖关系，大多数情况下依赖关系体现在某个类的方法使用另一个类的对象作为参数。</p><p>在UML中，<strong>依赖关系用带箭头的虚线表示，由依赖的一方指向被依赖的一方。</strong></p><p>比如，驾驶员（Driver）开车，Driver类的drive()方法将车（Car）的对象作为一个参数传递，以便在drive()方法中能够调用car的move()方法，且驾驶员的drive()方法依赖车的move()方法，因此也可以说Driver依赖Car，C++代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Driver</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drive</span><span class="params">(Car car)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">car.<span class="built_in">move</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其UML的画法为：</p><p><img src="/image_8.75005ac2.png"></p><p>依赖关系通常通过三种方式来实现：</p><p>1. 将一个类的对象作为另一个类中方法的参数</p><p>2. 在一个类的方法中将另一个类的对象作为其对象的局部变量</p><p>3. 在一个类的方法中调用另一个类的静态方法</p><hr><h1 id="6、关联关系、聚合关系、组合关系之间的区别"><a href="#6、关联关系、聚合关系、组合关系之间的区别" class="headerlink" title="6、关联关系、聚合关系、组合关系之间的区别"></a>6、关联关系、聚合关系、组合关系之间的区别</h1><p>从上文可以看出，关联关系、聚合关系和组合关系三者之间比较相似，本文的最后就来总结一下这三者之间的区别。</p><p>关联和聚合的区别主要在于语义上：<strong>关联的两个对象之间一般是平等的，聚合则一般是不平等的。</strong></p><p>聚合和组合的区别则在语义和实现上都有差别：</p><p>组合的两个对象之间生命周期有很大的关联，被组合的对象在组合对象创建的同时或者创建之后创建，在组合对象销毁之前销毁，一般来说被组合对象不能脱离组合对象独立存在，而且也只能属于一个组合对象；</p><p>聚合则不一样，被聚合的对象可以属于多个聚合对象。</p><p><strong>再举例子来说：</strong></p><p>你和你的朋友属于关联关系，因为你和你的朋友之间的关系是平等的，关联关系只是表示一下两个对象之间的一种简单的联系而已，就像我有一个朋友你和你借的书属于聚合关系，第一是因为书可以独立存在，第二是因为书不仅仅属于你，也可以属于别人，只是暂时你拥有</p><p>你和你的心脏属于组合关系，因为你的心脏只是属于你的，不能脱离与你而存在不过，实际应用中，我个人感觉三种关系其实没有区分得这么清楚，有些架构师甚至会说”组合和聚合没什么区别”，所以，有时候不需要把细节扣得这么细，合理利用对象之间的关系给出设计方案即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="c++数据传输" scheme="http://example.com/categories/c-%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/"/>
    
    
    <category term="UML类图" scheme="http://example.com/tags/UML%E7%B1%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>序列化-protobuf</title>
    <link href="http://example.com/2023/07/24/%E5%BA%8F%E5%88%97%E5%8C%96-protobuf/"/>
    <id>http://example.com/2023/07/24/%E5%BA%8F%E5%88%97%E5%8C%96-protobuf/</id>
    <published>2023-07-24T15:45:18.249Z</published>
    <updated>2023-07-24T15:48:15.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-序列化"><a href="#1-序列化" class="headerlink" title="1. 序列化"></a>1. 序列化</h1><blockquote><p>序列化 (Serialization)将对象的<strong>状态信息转换为</strong>可以<strong>存储或传输的形式的过程</strong>，与之相对应的过程称之为反序列化（Unserialization）。&#x3D;&#x3D;<strong>序列化和反序列化主要用于解决在跨平台和跨语言的情况下, 模块之间的交互和调用，但其本质是为了解决数据传输问题</strong>&#x3D;&#x3D;。 </p><p>实现数据序列化:</p><ul><li>要有原始数据<ul><li>复合类型 -&gt; 最常见的情况</li><li>基础数据类型</li></ul></li><li>通过某些方式 -&gt; 另外一种形式的数据</li><li>得到的数据干啥? -&gt; 目的: 进行分发, 分发到不同的终端&#x2F;平台, 保证不同的平台能正确解析<ul><li>网络传输</li><li>磁盘拷贝</li></ul></li></ul><p><font color="red">序列化目的不是为了加密, 为的是数据的跨平台传输</font></p><p>序列化的整体过程:</p><ul><li>发送端<ul><li>原始数据 -&gt; 序列化 (编码) -&gt; 特殊格式的字符串</li><li>发送这个字符串</li></ul></li><li>接收端:<ul><li>接收数据</li><li>特殊格式的字符串 -&gt; 反序列化 (解码) -&gt; 原始数据</li><li>对原始数据进行处理</li></ul></li></ul></blockquote><h2 id="1-1-网络通信中的问题分析"><a href="#1-1-网络通信中的问题分析" class="headerlink" title="1.1 网络通信中的问题分析"></a>1.1 网络通信中的问题分析</h2><p>发送过程中遇到的一些问题?</p><ul><li><p>平台不同</p><ul><li>32bit &#x2F; 64bit <ul><li>long</li></ul></li><li>平台不同, 某些数据类型占用的内存大小不同</li></ul></li><li><p>如果不是字符串, 需要进行字节序转换</p><ul><li><p>字符串没有字节序问题, 字符在内存中只占一个字节</p></li><li><p>如果发送的是结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">12</span>];</span><br><span class="line">    <span class="type">long</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Test t;</span><br><span class="line">send()/write()</span><br><span class="line">send(fd, (<span class="type">void</span>*)t, <span class="keyword">sizeof</span>(t), <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>大小端问题</p></li></ul></li><li><p>语言不同</p><ul><li>语言不同数据类型占用的内存有可能不同<ul><li>c -&gt; char -&gt; 1字节</li><li>java -&gt; char -&gt; 2字节</li></ul></li></ul></li><li><p>字节对齐问题</p></li></ul><h2 id="1-2-常用的序列化方式"><a href="#1-2-常用的序列化方式" class="headerlink" title="1.2 常用的序列化方式"></a>1.2 常用的序列化方式</h2><ol><li><p>XML（ Extensible Markup Language ）类似于html</p><blockquote><p>XML是一种常用的序列化和反序列化协议，具有跨机器，跨语言等优点。XML历史悠久，其1.0版本早在1998年就形成标准，并被广泛使用至今。</p><p>XML的最初产生目标是对互联网文档进行标记，所以它的设计理念中就包含了对于人和机器都具备可读性。 但是，当这种标记文档的设计被用来序列化对象的时候，就显得冗长而复杂。</p><p>XML基本格式:</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Library</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Type</span> <span class="attr">name</span>=<span class="string">&quot;小说&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Book</span> <span class="attr">author</span>=<span class="string">&quot;J.K.ROWLING&quot;</span> <span class="attr">price</span>=<span class="string">&quot;12$&quot;</span>&gt;</span>哈利波特1<span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Book</span> <span class="attr">author</span>=<span class="string">&quot;J.K.ROWLING&quot;</span> <span class="attr">price</span>=<span class="string">&quot;12$&quot;</span>&gt;</span>哈利波特2<span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Book</span> <span class="attr">author</span>=<span class="string">&quot;J.K.ROWLING&quot;</span> <span class="attr">price</span>=<span class="string">&quot;12$&quot;</span>&gt;</span>哈利波特3<span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Book</span> <span class="attr">author</span>=<span class="string">&quot;J.K.ROWLING&quot;</span> <span class="attr">price</span>=<span class="string">&quot;12$&quot;</span>&gt;</span>哈利波特4<span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Type</span> <span class="attr">name</span>=<span class="string">&quot;历史&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Book</span> <span class="attr">author</span>=<span class="string">&quot;司马迁&quot;</span> <span class="attr">price</span>=<span class="string">&quot;20$&quot;</span>&gt;</span>史记<span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Library</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Json（ JavaScript Object Notation ）</p><blockquote><p>JSON起源于弱类型语言Javascript，它的产生来自于一种称之为”关联数组（Associative array）”的概念，其本质是就是采用”键值对”的方式来描述对象。</p><p>JSON格式保持了XML的人眼可读的优点，非常符合工程师对对象的理解。</p><p>相对于XML而言，序列化后的数据更加简洁（XML所产生序列化之后文件的大小接近JSON的两倍），而且其协议比较简单，解析速度比较快。</p><p>JSON格式具备Javascript的先天性支持，所以被广泛应用于Web browser的应用常景中，是Ajax的事实标准协议。</p><p>更多资料可查看：<a href="http://json.org/">http://json.org/</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json是一种数据格式, 不是语言, 和平台语言无关</span></span><br><span class="line"><span class="comment">// json数组</span></span><br><span class="line"><span class="punctuation">[</span>整形<span class="punctuation">,</span> 浮点型<span class="punctuation">,</span> 布尔类型<span class="punctuation">,</span> 字符串<span class="punctuation">,</span> json数组<span class="punctuation">,</span> json对象<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">12</span><span class="punctuation">,</span> <span class="number">12.44</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="string">&quot;hello&quot;</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment">// json对象</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">json对象中是n个键值对</span><br><span class="line">key<span class="punctuation">:</span> 必须是字符串</span><br><span class="line">value<span class="punctuation">:</span> </span><br><span class="line">整形</span><br><span class="line">浮点型</span><br><span class="line">布尔</span><br><span class="line">字符串</span><br><span class="line">json数组</span><br><span class="line">json对象</span><br><span class="line"></span><br><span class="line">注意事项<span class="punctuation">:</span></span><br><span class="line">在一个文件中只能存储一个大的数组或者对象<span class="punctuation">,</span> 但是可以嵌套使用</span><br><span class="line">原素和原始之间使用逗号间隔(一个键值对视为一个元素)</span><br><span class="line">最后一个元素后边没有逗号</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lilei&quot;</span><span class="punctuation">:</span><span class="string">&quot;112334&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tom&quot;</span><span class="punctuation">:</span><span class="string">&quot;helolll&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lucy&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxxxyyyy&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span> <span class="string">&quot;历史&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;张三&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;father&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三丰&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mother&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;sister&quot;</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;favorite&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;足球&quot;</span><span class="punctuation">,</span> <span class="string">&quot;乒乓&quot;</span><span class="punctuation">,</span> <span class="string">&quot;游泳&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="attr">&quot;李四&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Protocol Buffer</p></li><li><p>ASN.1 抽象语法标记(Abstract Syntax Notation One) </p></li><li><p>boost 序列化的类</p></li></ol><h1 id="2-protobuf"><a href="#2-protobuf" class="headerlink" title="2. protobuf"></a>2. protobuf</h1><blockquote><p>Protocol Buffer( 简称 Protobuf) 是Google公司内部的混合语言数据标准，它是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或RPC 数据交换格式。</p><p>Protobuf是一个纯粹的展示层协议，可以和各种传输层协议一起使用，Protobuf的文档也非常完善。google 提供了多种语言的实现：java、c#、c++、go 和 python，每一种实现都包含了相应语言的编译器以及库文件。</p><p>Protobuf支持的数据类型相对较少，不支持常量类型。由于其设计的理念是纯粹的展现层协议，目前并没有一个专门支持Protobuf的RPC框架。</p><p>更多资料可查看：<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a></p></blockquote><h2 id="2-1-操作流程"><a href="#2-1-操作流程" class="headerlink" title="2.1 操作流程"></a>2.1 操作流程</h2><blockquote><ul><li>准备数据<ul><li>复合类型: 结构体&#x2F; 类</li><li>基础类型</li></ul></li><li>创建一个新文件 <code>xxx.proto</code></li><li>将我们要序列化的数据 -&gt; 写入到proto文件<ul><li>有语法格式</li></ul></li><li>通过一个命令 <code>protoc</code>将<code>xxx.proto</code>文件生成一个c++的类 <ul><li>对应一个头文件&#x2F; 源文件</li><li>操作命令-&gt; 在window终端中: <code>protoc xxx.proto --cpp_out=./</code></li></ul></li><li>直接使用这个类<ul><li>里边有对数据操作的api<ul><li>读数据 api<ul><li>方法名字 <code>变量名()</code></li></ul></li><li>写数据 api<ul><li>方法名字: <code>set_变量名(arg)</code></li></ul></li></ul></li></ul></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要序列化的数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Persion</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> sex;<span class="comment">// man woman</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id;</span><br></pre></td></tr></table></figure><ul><li><p>在.proto文件中定义消息格式</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// protobuf的版本</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;<span class="comment">// proto2</span></span><br><span class="line"><span class="comment">// 组织Persion结构体</span></span><br><span class="line"><span class="comment">// 语法格式</span></span><br><span class="line">message 关键字(相当于被创建出的类的名字)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line">数据类型 变量名 = 变量的编号;<span class="comment">// 编号从1开始, 不能重复</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .proto文件 生成 c++ 类的命令</span></span><br><span class="line">protoc proto文件名 --cpp_out=生成目录</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">.proto类型</th><th align="center">**C++**类型</th><th><strong>备注</strong></th></tr></thead><tbody><tr><td align="center">double</td><td align="center">double</td><td>64位浮点数</td></tr><tr><td align="center">float</td><td align="center">float</td><td>32位浮点数</td></tr><tr><td align="center">int32</td><td align="center">int32</td><td>32位整数</td></tr><tr><td align="center">int64</td><td align="center">int64</td><td>64位整数</td></tr><tr><td align="center">uint32</td><td align="center">uint32</td><td>32位无符号整数</td></tr><tr><td align="center">uint64</td><td align="center">uint64</td><td>64位无符号整数</td></tr><tr><td align="center">sint32</td><td align="center">sint32</td><td>32位整数，处理负数效率比int32更高</td></tr><tr><td align="center">sint64</td><td align="center">sint64</td><td>64位整数，处理负数效率比int64更高</td></tr><tr><td align="center">fixed32</td><td align="center">uint32</td><td>总是4个字节。如果数值总是比总是比228大的话，这个类型会比uint32高效。</td></tr><tr><td align="center">fixed64</td><td align="center">uint64</td><td>总是8个字节。如果数值总是比总是比256大的话，这个类型会比uint64高效。</td></tr><tr><td align="center">sfixed32</td><td align="center">int32</td><td>总是4个字节</td></tr><tr><td align="center">sfixed64</td><td align="center">int64</td><td>总是8个字节</td></tr><tr><td align="center">bool</td><td align="center">bool</td><td>布尔类型</td></tr><tr><td align="center">string</td><td align="center">string</td><td>一个字符串必须是UTF-8编码或者7-bit ASCII编码的文本</td></tr><tr><td align="center">bytes</td><td align="center">string</td><td>处理多字节的语言字符、如中文</td></tr><tr><td align="center">enum</td><td align="center">enum</td><td>枚举</td></tr><tr><td align="center">message</td><td align="center">object of class</td><td>自定义的消息类型</td></tr></tbody></table></li><li><p>repeated限定修饰符</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;   <span class="comment">// 编号从1开始</span></span><br><span class="line">    <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">string</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要求name有多个 -&gt; 数组</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;   <span class="comment">// 编号从1开始</span></span><br><span class="line">    <span class="comment">// vector&lt;string&gt; name;</span></span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">bytes</span> name = <span class="number">2</span>;<span class="comment">// name可以在程序中创建多个, 在程序中作为动态数组来使用</span></span><br><span class="line">    <span class="type">string</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 定义枚举</span></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">Red = <span class="number">0</span>;<span class="comment">// protbuf中第一个枚举值必须为0</span></span><br><span class="line">Green = <span class="number">6</span>;</span><br><span class="line">Blue = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;   <span class="comment">// 编号从1开始</span></span><br><span class="line">    <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">string</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">    Color color = <span class="number">5</span>;<span class="comment">// 枚举变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>proto文件的导入</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Persion.proto</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 导入另外一个proto文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;Info.proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">Red = <span class="number">0</span>;<span class="comment">// protbuf中第一个枚举值必须为0</span></span><br><span class="line">Green = <span class="number">6</span>;</span><br><span class="line">Blue = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;   <span class="comment">// 编号从1开始</span></span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">string</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">    Color color = <span class="number">5</span>;</span><br><span class="line">    Info info = <span class="number">6</span>;<span class="comment">// Info对象, 导入的proto文件中的类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Info.proto</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Info</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bytes</span> address = <span class="number">1</span>;  <span class="comment">// 地址</span></span><br><span class="line">    <span class="type">int32</span> number = <span class="number">2</span>;   <span class="comment">// 门牌号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包 -&gt; 命名空间</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Persion.proto</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 导入另外一个proto文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;Info.proto&quot;</span>;</span><br><span class="line"><span class="comment">// 添加命名空间</span></span><br><span class="line"><span class="keyword">package</span> itcast;<span class="comment">// Persion类属于itcast这个命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">Red = <span class="number">0</span>;<span class="comment">// protbuf中第一个枚举值必须为0</span></span><br><span class="line">Green = <span class="number">6</span>;</span><br><span class="line">Blue = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;   <span class="comment">// 编号从1开始</span></span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">string</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">    Color color = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 命名空间.类名</span></span><br><span class="line">    itheima.Info info = <span class="number">6</span>;<span class="comment">// Info对象, 导入的proto文件中的类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Info.proto</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// Persion类属于itheima这个命名空间</span></span><br><span class="line"><span class="keyword">package</span> itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bytes</span> address = <span class="number">1</span>;  <span class="comment">// 地址</span></span><br><span class="line">    <span class="type">int32</span> number = <span class="number">2</span>;   <span class="comment">// 门牌号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用protobuf编译器生成C++类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">protobuf编译器, 编译源码得到的 protoc.exe</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--cpp_out 生成的c++类的位置</span></span><br><span class="line">protoc.exe xxx.proto --cpp_out=目录</span><br></pre></td></tr></table></figure></li><li><p>使用C++ API来读写消息</p><ul><li>读: <code>变量名()</code></li><li>写: <code>set_变量名(arg1, arg2, ...)</code></li></ul></li><li><p>vs配置 -&gt; 添加宏</p><p><img src="/assets/1566718547217.png" alt="1566718547217"></p></li></ul><h1 id="3-业务数据分析"><a href="#3-业务数据分析" class="headerlink" title="3. 业务数据分析"></a>3. 业务数据分析</h1><h2 id="3-1-客户端"><a href="#3-1-客户端" class="headerlink" title="3.1 客户端"></a>3.1 客户端</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备要发送的数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RequestMsg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1 密钥协商 //2 密钥校验; // 3 密钥注销</span></span><br><span class="line">    <span class="type">int</span> cmdType; <span class="comment">// 报文类型</span></span><br><span class="line">    string clientId; <span class="comment">// 客户端编号</span></span><br><span class="line">    string serverId; <span class="comment">// 服务器端编号</span></span><br><span class="line">    string sign;</span><br><span class="line">    string data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">RequestMsg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int32</span> cmdType;</span><br><span class="line"><span class="type">bytes</span> clientId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-服务器端"><a href="#3-2-服务器端" class="headerlink" title="3.2 服务器端"></a>3.2 服务器端</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RespondMsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">bool</span> rv; <span class="comment">// 返回值</span></span><br><span class="line">    <span class="type">int</span> seckeyid; <span class="comment">// 对称密钥编号 keysn</span></span><br><span class="line">    <span class="built_in">string</span> clientId; <span class="comment">// 客户端编号</span></span><br><span class="line">    <span class="built_in">string</span> serverId; <span class="comment">// 服务器编号</span></span><br><span class="line">    <span class="built_in">string</span> data; <span class="comment">// 服务器端随机数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/assets/protobuf.svg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-序列化&quot;&gt;&lt;a href=&quot;#1-序列化&quot; class=&quot;headerlink&quot; title=&quot;1. 序列化&quot;&gt;&lt;/a&gt;1. 序列化&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;序列化 (Serialization)将对象的&lt;strong&gt;状态信息转换为&lt;/str</summary>
      
    
    
    
    <category term="c++数据传输" scheme="http://example.com/categories/c-%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/"/>
    
    
    <category term="序列化" scheme="http://example.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="protobuf" scheme="http://example.com/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式-套接字通信</title>
    <link href="http://example.com/2023/07/24/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2023/07/24/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1/</id>
    <published>2023-07-24T13:19:53.744Z</published>
    <updated>2023-07-24T15:43:52.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1. 工厂模式"></a>1. 工厂模式</h1><h2 id="2-简单工厂模式-只需要一个工厂类"><a href="#2-简单工厂模式-只需要一个工厂类" class="headerlink" title="2. 简单工厂模式 - 只需要一个工厂类"></a>2. 简单工厂模式 - 只需要一个工厂类</h2><blockquote><p>工厂: 使用一个单独的类来做创建实例的过程, 这就是工厂。</p></blockquote><blockquote><p>简单工厂：把对象的创建放到一个工厂类中，通过参数来创建不同的对象。<br>特点：</p><ul><li>缺点：每添一个对象，就需要对简单工厂进行修改（尽管不是删代码，仅仅是添一个switch case，但仍然违背了“不改代码”的原则）</li><li>优点：去除了与具体产品的依赖, 实现简单。</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简单工厂模式的使用:</span></span><br><span class="line">1. 创建一个工厂类</span><br><span class="line">2. 在这个类中提供一个公共的成员方法</span><br><span class="line">- 创建对象, 一般情况下创建某些实现多态的子类对象</span><br><span class="line">- 返回这个对象的地址</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过创建工厂类, 添加工厂函数, 创建对象</span></span><br><span class="line"><span class="comment">// 两个编解码的子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestCodec</span> : <span class="keyword">public</span> Codec<span class="comment">// 编解码请求数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RespondCodec</span> : <span class="keyword">public</span> Codec<span class="comment">// 编解码响应数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">知识点:</span></span><br><span class="line"><span class="comment">做条件判断的时候, if..else if .. else 效率比 switch 低</span></span><br><span class="line"><span class="comment">如果判断的情况比较少使用 if .. else</span></span><br><span class="line"><span class="comment">如果情况比较多, 建议使用 switch</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建工厂类, 创建编解码对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Factory</span>();</span><br><span class="line">    ~<span class="built_in">Factory</span>();</span><br><span class="line">    <span class="comment">// 工厂函数, 创建对象</span></span><br><span class="line">    <span class="comment">// flag==1 -&gt; RequestCodec</span></span><br><span class="line">    <span class="comment">// falg==2 -&gt; RespondCodec</span></span><br><span class="line">    <span class="function">Codec* <span class="title">createObject</span><span class="params">(<span class="type">int</span> flag)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Codec* c = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c = <span class="keyword">new</span> <span class="built_in">RequestCodec</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c = <span class="keyword">new</span> <span class="built_in">RespondCodec</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂类的使用:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建工厂类对象</span></span><br><span class="line">Factory* fac = <span class="keyword">new</span> Factory;</span><br><span class="line"><span class="comment">// 2. 通过工厂函数创建编解码对象</span></span><br><span class="line">Codec* c = fac-&gt;<span class="built_in">createObject</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 3. 编码</span></span><br><span class="line">string str = c-&gt;<span class="built_in">encoceMsg</span>();</span><br></pre></td></tr></table></figure><h2 id="3-工厂模式-需要有N个工厂类"><a href="#3-工厂模式-需要有N个工厂类" class="headerlink" title="3. 工厂模式 - 需要有N个工厂类"></a>3. 工厂模式 - 需要有N个工厂类</h2><blockquote><p>工厂方法：每种产品由一种工厂来创建，一个工厂保存一个new</p><p>特点：基本完美，完全遵循  “不改代码”的原则</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工厂模式流程</span></span><br><span class="line">1. 创建一个工厂类的基类</span><br><span class="line">2. 在这个基类中定义一个虚函数 -&gt; 创建对象的方法</span><br><span class="line">3. 创建子工厂类(编解码的基类有多少子类, 就创建多少个子工厂类)</span><br><span class="line">- 每个编解码的子类, 都对应一个工厂类</span><br><span class="line">4. 在子工厂类中重写工厂类基类中的虚函数</span><br></pre></td></tr></table></figure><p>工厂类的使用:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个编解码的子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestCodec</span> : <span class="keyword">public</span> Codec</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RespondCodec</span> : <span class="keyword">public</span> Codec</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCodec</span> : <span class="keyword">public</span> Codec<span class="comment">// 编解码响应数据</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建工厂类的基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BaseFactory</span>();</span><br><span class="line">    ~BaseFactory;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Codec* <span class="title">createObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂类子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RequestFactory</span>();</span><br><span class="line">    ~RequestFactory;</span><br><span class="line">    <span class="function">Codec* <span class="title">createObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RequestCodec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RespondFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RespondFactory</span>();</span><br><span class="line">    ~RespondFactory;</span><br><span class="line">    <span class="function">Codec* <span class="title">createObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespondCodec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TestFactory</span>();</span><br><span class="line">    ~TestFactory;</span><br><span class="line">    <span class="function">Codec* <span class="title">createObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestCodec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂模式使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建工厂类对象</span></span><br><span class="line">BaseFactory* fac = new RespondFactory;</span><br><span class="line"><span class="comment">// 2. 得到了编解码对象</span></span><br><span class="line">Codec* c = fac-&gt;createObject();</span><br><span class="line"><span class="comment">// 3. 编码</span></span><br><span class="line"><span class="built_in">string</span> str = c-&gt;encodeMsg();</span><br></pre></td></tr></table></figure><h1 id="2-套接字通信"><a href="#2-套接字通信" class="headerlink" title="2. 套接字通信"></a>2. 套接字通信</h1><h2 id="2-1-通信效率问题"><a href="#2-1-通信效率问题" class="headerlink" title="2.1 通信效率问题"></a>2.1 通信效率问题</h2><ul><li><p>服务器端</p><ul><li><p>单线程&#x2F;单进程</p><ul><li>无法使用, 不支持多客户端</li></ul></li><li><p>多线程&#x2F;多进程</p><ul><li>写程序优先考虑多线程</li><li>什么时候考虑多进程:<ul><li>启动了一个可执行程序A, 要在A中启动可执行程序B</li></ul></li><li>支持多客户端连接</li></ul></li><li><p>IO多路转接</p><ul><li><p>单线程&#x2F;进程</p><ul><li>支持多客户端连接</li><li>效率并不是最高的<ul><li>所有的客户端请求都是顺序处理的 -&gt; 排队</li></ul></li></ul></li><li><p>多线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">acceptConn</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fd = accept();    </span><br><span class="line">    <span class="comment">// fd添加到epoll树上</span></span><br><span class="line">    epoll_ctl();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">connClient</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">read();</span><br><span class="line">    write();</span><br><span class="line">    <span class="comment">// 如果连接断开</span></span><br><span class="line">    epoll_crl(epfd, epoll_ctl_del, fd, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1. 监听fd</span></span><br><span class="line">    <span class="type">int</span> lfd = socket();</span><br><span class="line">    <span class="comment">// 2. 绑定</span></span><br><span class="line">    bind();</span><br><span class="line">    <span class="comment">// 3. 监听</span></span><br><span class="line">    listen();</span><br><span class="line">    <span class="comment">// 4. 初始化epoll</span></span><br><span class="line">    <span class="type">int</span> epfd = epoll_create(x);</span><br><span class="line">    <span class="comment">// 5. epoll添加检测节点 -&gt; lfd</span></span><br><span class="line">    epoll_ctl(epfd, epoll_ctl_add, lfd, ev);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">evs</span>[1024];</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = epoll_wait(epfd, evs, <span class="number">1024</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;num; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> curfd = evs[i].data.fd;</span><br><span class="line">            <span class="keyword">if</span>(curfd == lfd)</span><br><span class="line">            &#123;</span><br><span class="line">                pthread_create(&amp;tid, <span class="literal">NULL</span>, acceptConn, &amp;epfd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 这么传递curfd是错误的 -&gt; 不能直接传地址</span></span><br><span class="line">                <span class="comment">// 根据分析需要传递: curfd和epfd</span></span><br><span class="line">                pthread_create(&amp;tid, <span class="literal">NULL</span>, connClient, &amp;curfd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>线程池</p><ul><li><p>多个线程的一个集合, 可以回收用完的线程</p><ul><li>线程池中线程的个数? -&gt; 看业务逻辑</li><li>密集型业务逻辑: 需要大量cup时间进行数据处理<ul><li>线程个数 &#x3D;&#x3D; 当前电脑的cup核心数</li><li>进行IO操作<ul><li>线程个数 &#x3D; 2倍cup核心数</li></ul></li></ul></li></ul></li><li><p>不需要频繁的创建销毁线程</p></li><li><p>设计思路</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 需要两个角色</span><br><span class="line"></span><br><span class="line">  - 管理者 -&gt; <span class="number">1</span>个线程</span><br><span class="line">  - 工作的线程 -&gt; N个</span><br><span class="line">  <span class="number">2.</span> 管理者</span><br><span class="line"></span><br><span class="line">  - 不工作(不处理业务逻辑, 监测工作的线程的状态, 管理线程的个数)</span><br><span class="line">    - 假设工作线程不够用了, 动态创建新的工作线程</span><br><span class="line">    - 建设工作的线程太多了, 销毁一部分工作的线程</span><br><span class="line">    - 动态监测工作的线程的状态</span><br><span class="line">  <span class="number">3.</span> 工作的线程</span><br><span class="line"></span><br><span class="line">  - 处理业务逻辑</span><br><span class="line">  <span class="number">4.</span> 需要一个任务队列</span><br><span class="line"></span><br><span class="line">  - 存储任务 -&gt; 唤醒阻塞线程 -&gt; 条件变量 pthread_cond_broadcast/siganl</span><br><span class="line">  - 工作的线程处理任务队列中的任务</span><br><span class="line">  - 没有任务 -&gt; 阻塞 pthread_cond_wait</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>客户端</p><ul><li><p>一般情况客户端只有一个连接和服务器通信</p><ul><li>没什么可以优化的</li></ul></li><li><p>客户端同时有多个连接和服务器通信</p><ul><li><p>第一个链接: 数据交换</p></li><li><p>第2-6个连接: 下载</p></li><li><p>提交效率的点:</p><ul><li>建立连接的时候:<code>connect</code></li></ul></li><li><p>处理思路: -&gt; 套接字连接池</p><ul><li>在进行业务通信之前, 先把需要的连接创建出来, 存储到一个容器中</li><li>当前要通信的时候, 从容器中取出一个连接 (fd) -&gt; 和服务器通信</li><li>通信完成之后 -&gt; 将这个连接放回到容器中</li></ul></li><li><p>套接字连接池实现思路</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConnectPool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConnectPool</span>(<span class="type">int</span> number)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;number; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> fd = <span class="built_in">socket</span>();<span class="comment">// 创建通信的fd</span></span><br><span class="line">            <span class="built_in">conect</span>();<span class="comment">// 连接服务器</span></span><br><span class="line">            m_list.<span class="built_in">push</span>(fd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 取出一个连接</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getConnect</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_list.<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> fd = m_list.<span class="built_in">head</span>();</span><br><span class="line">            m_list.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">return</span> fd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 放回一个连接</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">putConnect</span><span class="params">(<span class="type">int</span> fd, <span class="type">bool</span> isvaild)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      m_list.<span class="built_in">push</span>(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">ConnectPool</span>();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; m_list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="2-2-C-类封装"><a href="#2-2-C-类封装" class="headerlink" title="2.2 C++类封装"></a>2.2 C++类封装</h2><ul><li><p>c语言API</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="comment">// C API</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckClient_init</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">/* 客户端 连接服务器 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckClient_connect</span><span class="params">(<span class="type">char</span> *ip, <span class="type">int</span> port, <span class="type">int</span> connecttime, <span class="type">int</span> *connfd)</span>;</span><br><span class="line"><span class="comment">/* 客户端 关闭和服务端的连接 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckClient_closeconn</span><span class="params">(<span class="type">int</span> connfd)</span>;</span><br><span class="line"><span class="comment">/* 客户端 发送报文 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckClient_send</span><span class="params">(<span class="type">int</span> connfd, <span class="type">int</span> sendtime, <span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> datalen)</span>;</span><br><span class="line"><span class="comment">/* 客户端 接受报文 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckClient_rev</span><span class="params">(<span class="type">int</span> connfd, <span class="type">int</span> revtime, <span class="type">unsigned</span> <span class="type">char</span> **out, <span class="type">int</span> *outlen)</span>; <span class="comment">//1</span></span><br><span class="line"><span class="comment">/* 释放内存 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sck_FreeMem</span><span class="params">(<span class="type">void</span> **buf)</span>;</span><br><span class="line"><span class="comment">/* 客户端 释放 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckClient_destroy</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器端</span></span><br><span class="line"><span class="comment">/* 服务器端初始化 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckServer_init</span><span class="params">(<span class="type">int</span> port, <span class="type">int</span> *listenfd)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sckServer_accept</span><span class="params">(<span class="type">int</span> listenfd, <span class="type">int</span> timeout, <span class="type">int</span> *connfd)</span>;</span><br><span class="line"><span class="comment">/* 服务器端发送报文 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckServer_send</span><span class="params">(<span class="type">int</span> connfd, <span class="type">int</span> timeout, <span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> datalen)</span>;</span><br><span class="line"><span class="comment">/* 服务器端端接受报文 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckServer_rev</span><span class="params">(<span class="type">int</span>  connfd, <span class="type">int</span> timeout, <span class="type">unsigned</span> <span class="type">char</span> **out, <span class="type">int</span> *outlen)</span>; <span class="comment">//1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckServer_close</span><span class="params">(<span class="type">int</span> connfd)</span>;</span><br><span class="line"><span class="comment">/* 服务器端环境释放 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sckServer_destroy</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p>C++ 套接字类</p><ul><li><p>客户端</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建TcpSocket对象 == 一个连接, 这个对象就可以和服务器通信了, 多个连接需要创建多个这样的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TcpSocket</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TcpSocket</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_connfd = <span class="built_in">socket</span>(af_inet, sock_stream, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">TcpSocket</span>(<span class="type">int</span> fd)</span><br><span class="line">    &#123;</span><br><span class="line">        m_connfd = fd;<span class="comment">// 传递进行的fd是可以直接通信的文件描述符, 不需要连接操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">TcpSocket</span>();</span><br><span class="line">    <span class="comment">/* 客户端 连接服务器 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">conectToHost</span><span class="params">(string ip, <span class="type">unsigned</span> <span class="type">short</span> port, <span class="type">int</span> connecttime)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">connect</span>(m_connfd, &amp;serverAddress, &amp;len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 客户端 关闭和服务端的连接 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">disConnect</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/* 客户端 发送报文 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sendMsg</span><span class="params">(string sendMsg, <span class="type">int</span> sendtime = <span class="number">10000</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">send</span>(m_connfd, data, datadlen, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 客户端 接受报文 */</span></span><br><span class="line">    <span class="function">string <span class="title">recvMsg</span><span class="params">(<span class="type">int</span> timeout)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">recv</span>(m_connfd, buf, size, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_connfd;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>服务器端</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个类不能用, 因为只能和一个客户端建立连接</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TcpServer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 初始化监听的套接字: 创建, 绑定, 监听</span></span><br><span class="line">    <span class="built_in">TcpServer</span>();</span><br><span class="line">    ~<span class="built_in">TcpServer</span>();<span class="comment">// 在这里边关闭监听的fd</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">acceptConn</span><span class="params">(<span class="type">int</span> timeout)</span></span>;</span><br><span class="line">    <span class="comment">/* 服务器 发送报文 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sendMsg</span><span class="params">(string sendMsg, <span class="type">int</span> sendtime = <span class="number">10000</span>)</span></span>;</span><br><span class="line">    <span class="comment">/* 服务器 接受报文 */</span></span><br><span class="line">    <span class="function">string <span class="title">recvMsg</span><span class="params">(<span class="type">int</span> timeout)</span></span>; </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">disConnect</span><span class="params">()</span></span>;<span class="comment">// 和客户端断开连接</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_lfd;<span class="comment">// 监听的文件描述符</span></span><br><span class="line">    <span class="type">int</span> m_connfd;<span class="comment">// 通信的文件描述符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二版</span></span><br><span class="line"><span class="comment">// 这个类不能用, 因为只能和一个客户端建立连接</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TcpServer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 初始化监听的套接字: 创建, 绑定, 监听</span></span><br><span class="line">    <span class="built_in">TcpServer</span>();</span><br><span class="line">    ~<span class="built_in">TcpServer</span>();<span class="comment">// 在这里边关闭监听的fd</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">acceptConn</span><span class="params">(<span class="type">int</span> timeout)</span></span>;</span><br><span class="line">    <span class="comment">/* 服务器 发送报文 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sendMsg</span><span class="params">(string sendMsg, <span class="type">int</span> sendtime = <span class="number">10000</span>)</span></span>;</span><br><span class="line">    <span class="comment">/* 服务器 接受报文 */</span></span><br><span class="line">    <span class="function">string <span class="title">recvMsg</span><span class="params">(<span class="type">int</span> timeout)</span></span>; </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">disConnect</span><span class="params">()</span></span>;<span class="comment">// 和客户端断开连接</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_lfd;<span class="comment">// 监听的文件描述符</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; m_connfd;<span class="comment">// 不好用, 因为在接收和发送数据的时候, 不知道用安一个fd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 第三个版本</span></span><br><span class="line"><span class="comment">// 思想: 服务端不负责通信, 只负责监听, 如果通信使用客户端类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">TcpServer</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// 初始化监听的套接字: 创建, 绑定, 监听</span></span><br><span class="line">      <span class="built_in">TcpServer</span>();</span><br><span class="line">      ~<span class="built_in">TcpServer</span>();<span class="comment">// 在这里边关闭监听的fd</span></span><br><span class="line">      </span><br><span class="line">      <span class="function">TcpSocket* <span class="title">acceptConn</span><span class="params">(<span class="type">int</span> timeout = <span class="number">90000</span>)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">       <span class="type">int</span> fd = <span class="built_in">accept</span>(m_lfd, &amp;address, &amp;len);</span><br><span class="line">          <span class="comment">// 通信fd -&gt; 类</span></span><br><span class="line">          TcpSocket* tcp = <span class="keyword">new</span> <span class="built_in">TcpSocket</span>(fd);</span><br><span class="line">          <span class="keyword">if</span>(tcp != <span class="literal">NULL</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">return</span> tcp;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">int</span> m_lfd;<span class="comment">// 监听的fd</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// TcpServer 使用</span></span><br><span class="line">  <span class="function"><span class="type">void</span>* <span class="title">callback</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      TcpSocket* tcp = (TcpSocket* )arg;</span><br><span class="line">      <span class="comment">// 通信</span></span><br><span class="line">      tcp-&gt;<span class="built_in">sendMsg</span>();</span><br><span class="line">      tcp-&gt;<span class="built_in">recvMsg</span>();</span><br><span class="line">      tcp-&gt;<span class="built_in">disConnect</span>();</span><br><span class="line">      <span class="keyword">delete</span> tcp;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 套接字通信的服务器端程序</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      TcpServer* server = <span class="keyword">new</span> TcpServer;</span><br><span class="line">      <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          TcpSocket* tcp = server-&gt;<span class="built_in">acceptConn</span>();</span><br><span class="line">          <span class="comment">// 创建子线程 -&gt; 通信</span></span><br><span class="line">          <span class="built_in">pthread_crate</span>(&amp;tid, <span class="literal">NULL</span>, callback, tcp);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">delete</span> server;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tcp客户端程序</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建通信的套接字对象</span></span><br><span class="line">    TcpSocket* tcp = <span class="keyword">new</span> TcpSocket;</span><br><span class="line">    <span class="comment">// 连接服务器</span></span><br><span class="line">    tcp-&gt;<span class="built_in">conectToHost</span>(ip, port, timeout);</span><br><span class="line">    <span class="comment">// 通信</span></span><br><span class="line">    tcp-&gt;<span class="built_in">sendMsg</span>();</span><br><span class="line">    tcp-&gt;<span class="built_in">recvMsg</span>();</span><br><span class="line">    tcp-&gt;<span class="built_in">disConnect</span>();</span><br><span class="line">    <span class="keyword">delete</span> tcp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-工厂模式&quot;&gt;&lt;a href=&quot;#1-工厂模式&quot; class=&quot;headerlink&quot; title=&quot;1. 工厂模式&quot;&gt;&lt;/a&gt;1. 工厂模式&lt;/h1&gt;&lt;h2 id=&quot;2-简单工厂模式-只需要一个工厂类&quot;&gt;&lt;a href=&quot;#2-简单工厂模式-只需要一个工厂类&quot;</summary>
      
    
    
    
    <category term="c++数据传输" scheme="http://example.com/categories/c-%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/"/>
    
    
    <category term="工厂模式" scheme="http://example.com/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Socket" scheme="http://example.com/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/07/24/hello-world/"/>
    <id>http://example.com/2023/07/24/hello-world/</id>
    <published>2023-07-24T11:13:14.924Z</published>
    <updated>1985-10-26T08:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
